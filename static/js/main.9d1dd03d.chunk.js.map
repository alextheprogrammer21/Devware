{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","searchTerm","setSearchTerm","searchedBool","setSearchedBool","searchResults","setSearchResults","show","setShow","handleClose","listOfSearchResults","map","item","class","onClick","window","open","full_name","className","href","type","id","for","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","src","alt","placeholder","onChange","event","target","value","e","preventDefault","console","log","Promise","all","resolve","axios","get","then","d","data","items","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UAqGeA,MAxFf,WAAe,MAGqBC,IAAMC,SAAS,IAHpC,mBAGRC,EAHQ,KAGIC,EAHJ,OAIyBH,IAAMC,UAAS,GAJxC,mBAIRG,EAJQ,KAIMC,EAJN,OAK2BL,IAAMC,SAAS,IAL1C,mBAKRK,EALQ,KAKOC,EALP,OAMWP,IAAMC,UAAS,GAN1B,mBAMNO,EANM,KAMAC,EANA,KAYTC,EAAc,kBAAMD,GAAQ,IAgBpBE,EAAsBL,EAAcM,KAAI,SAACC,GAC7C,OAEV,wBAAIC,MAAM,OACT,4BAAQC,QAAS,WAAOC,OAAOC,KAAP,6BAAkCJ,EAAKK,UAAvC,0BAA0EL,EAAKK,eAQtG,OACE,yBAAKC,UAAU,OACnB,4BAAQL,MAAM,UACZ,uBAAGM,KAAK,GAAGN,MAAM,QAAjB,WACA,2BAAOA,MAAM,WAAWO,KAAK,WAAWC,GAAG,aAC3C,2BAAOR,MAAM,YAAYS,IAAI,YAAW,0BAAMT,MAAM,aACpD,wBAAIA,MAAM,QACR,wBAAIC,QAlCW,kBAAMN,GAAQ,KAkCJ,uBAAGW,KAAK,UAAR,YAI7B,kBAACI,EAAA,EAAD,CAAOhB,KAAMA,EAAMiB,OAAQf,GACnB,kBAACc,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,uBAEF,kBAACJ,EAAA,EAAMK,KAAP,qwBACA,kBAACL,EAAA,EAAMM,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYjB,QAASL,GAArC,WAMJ,yBAAKI,MAAM,QACX,yBAAKQ,GAAG,SACX,yBAAKW,IAAI,uFAAuFC,IAAI,UAAUZ,GAAG,WAI7G,yBAAKR,MAAM,UACZ,2BAAOO,KAAK,OAAOP,MAAM,aAAaqB,YAAY,4BAA4BC,SA9DhF,SAA2BC,GACzBlC,EAAckC,EAAMC,OAAOC,UA8D3B,4BAAQlB,KAAK,SAASP,MAAM,eAAeC,QAxD/C,SAAoByB,GAChBA,EAAEC,iBACFpC,GAAgB,GAEhBqC,QAAQC,IAAIzC,GACZ0C,QAAQC,IAAI,CACVD,QAAQE,QAAQC,IAAMC,IAAN,uDAA0D9C,OACzE+C,MAAK,SAACC,GACP,IAAMC,EAAOD,EAAE,GAAGC,KAAKC,MACvB7C,EAAiB4C,QAgDjB,uBAAGrC,MAAM,iBADX,iBAOH,wBAAIQ,GAAG,QACNlB,EAAeO,EAAsB,oCAIzC,yBAAKG,MAAM,UAAX,4CCpFoBuC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.9d1dd03d.chunk.js","sourcesContent":["//Created By Alex Setia\n//June 22, 2020\n//Devware\n\nimport React from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport \"./Search.css\";\nimport \"./List.css\";\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport AboutInfo from \"./AboutInfo\"\nfunction App() {\n\n  //---------------------STATES-------------------------//\n  let [searchTerm, setSearchTerm] = React.useState('');\n  let [searchedBool, setSearchedBool] = React.useState(false);\n  let [searchResults, setSearchResults] = React.useState([]);\n  const [show, setShow] = React.useState(false);\n    //----------------------------FUNCTIONS-----------------------------------//\n    function handleInputChange(event) {\n      setSearchTerm(event.target.value)\n}\n\nconst handleClose = () => setShow(false);\nconst handleShow = () => setShow(true);\n\n  function searchApps(e) {\n      e.preventDefault();\n      setSearchedBool(true)\n\n      console.log(searchTerm)\n      Promise.all([\n        Promise.resolve(axios.get(`https://api.github.com/search/repositories?q=${searchTerm}`)),\n      ]).then((d) => {\n        const data = d[0].data.items\n        setSearchResults(data);\n        })\n      }\n   \n        const listOfSearchResults = searchResults.map((item) => {\n          return (\n\n<li class=\"sub\"> \n <button onClick={() => {window.open(`https://github.com/${item.full_name}/archive/master.zip`)}}>{item.full_name}</button>\n</li>\n          )\n        });\n      \n\n//-----------------------HTML DISPLAY------------------------------//\n\n  return (\n    <div className=\"App\">\n<header class=\"header\">\n  <a href=\"\" class=\"logo\">Devware</a>\n  <input class=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\n  <label class=\"menu-icon\" for=\"menu-btn\"><span class=\"navicon\"></span></label>\n  <ul class=\"menu\">\n    <li onClick={handleShow}><a href=\"#about\">About</a></li>\n  </ul>\n</header>\n\n<Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>About Devware</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>There's been software that I've purchased before. There's also been freeware that I was able to download for free. However, when I started programming, I created a lot of things that could be useful for others around the globe, but was instead just put on github and to be forgotten about by everyone except my resume. The case was the same for thousands of other people on github. That's why I made devware. Devware is a search tool to find programs that people have put in time and effort into making for various reasons and allows other who aren't as familiar with github to download it with a simple click of a button. It's free but it's not exactly freeware. It has the functionality of software but it's not exactly software. It's developer ware, or devware.</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <div class=\"wrap\">\n      <div id=\"DIV_3\">\n\t\t\t<img src=\"https://raw.githubusercontent.com/alextheprogrammer21/Images/master/Devware-Logo.png\" alt=\"Devware\" id=\"IMG_4\" />\n\t\t</div>\n\n\n       <div class=\"search\">\n      <input type=\"text\" class=\"searchTerm\" placeholder=\"What are you looking for?\" onChange={handleInputChange}/>\n      <button type=\"submit\" class=\"searchButton\" onClick={searchApps}> \n        <i class=\"fa fa-search\"></i>\n        üîç\n     </button>\n   </div>\n\n   \n   <ul id=\"menu\" >\n   {searchedBool ? listOfSearchResults : <div> </div>}\n   </ul>\n</div>\n\n<div class=\"footer\">¬© 2020, Built by me using React :) </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}